name: Deploy to Kubernetes (via Bastion)

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/my-website
          docker build -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:latest

      - name: Setup SSH for bastion connection
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.BASTION_SSH_KEY }}" > ~/.ssh/bastion_key
          chmod 600 ~/.ssh/bastion_key

      - name: Copy Kubernetes manifests to bastion
        run: |
          scp -i ~/.ssh/bastion_key -o StrictHostKeyChecking=no k8s/deployment.yaml k8s/service.yaml k8s/ingress.yaml ubuntu@${{ secrets.BASTION_HOST }}:/tmp/

      - name: Deploy to Kubernetes via bastion
        run: |
          ssh -i ~/.ssh/bastion_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.BASTION_HOST }} << 'EOF'
            set -e
            
            echo "SSH connection successful!"
            echo "Kubernetes cluster status:"
            kubectl get nodes
            
            echo "Applying Kubernetes manifests..."
            kubectl apply -f /tmp/deployment.yaml
            kubectl apply -f /tmp/service.yaml
            kubectl apply -f /tmp/ingress.yaml
            
            echo "Checking deployment status..."
            kubectl rollout status deployment/$(kubectl get deployment -o name | head -n1 | cut -d'/' -f2) --timeout=120s
            
            # Clean up temporary files
            rm -f /tmp/deployment.yaml /tmp/service.yaml /tmp/ingress.yaml
            echo "âœ… Deployment completed successfully!"
          EOF
